type Query {
  booking(filter: booking_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [booking!]!
  booking_by_id(id: ID!, version: String): booking
  booking_aggregated(groupBy: [String], filter: booking_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [booking_aggregated!]!
  booking_by_version(version: String!, id: ID!): version_booking
  group_directus_users(filter: group_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [group_directus_users!]!
  group_directus_users_by_id(id: ID!, version: String): group_directus_users
  group_directus_users_aggregated(groupBy: [String], filter: group_directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [group_directus_users_aggregated!]!
  group_directus_users_by_version(version: String!, id: ID!): version_group_directus_users
  bookable_object_group(filter: bookable_object_group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [bookable_object_group!]!
  bookable_object_group_by_id(id: ID!, version: String): bookable_object_group
  bookable_object_group_aggregated(groupBy: [String], filter: bookable_object_group_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [bookable_object_group_aggregated!]!
  bookable_object_group_by_version(version: String!, id: ID!): version_bookable_object_group
  directus_sync_id_map(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_sync_id_map!]!
  directus_sync_id_map_by_id(id: ID!, version: String): directus_sync_id_map
  directus_sync_id_map_aggregated(groupBy: [String], filter: directus_sync_id_map_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_sync_id_map_aggregated!]!
  directus_sync_id_map_by_version(version: String!, id: ID!): version_directus_sync_id_map
  bookable_object(filter: bookable_object_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [bookable_object!]!
  bookable_object_by_id(id: ID!, version: String): bookable_object
  bookable_object_aggregated(groupBy: [String], filter: bookable_object_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [bookable_object_aggregated!]!
  bookable_object_by_version(version: String!, id: ID!): version_bookable_object
  group_invites(filter: group_invites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [group_invites!]!
  group_invites_by_id(id: ID!, version: String): group_invites
  group_invites_aggregated(groupBy: [String], filter: group_invites_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [group_invites_aggregated!]!
  group_invites_by_version(version: String!, id: ID!): version_group_invites
  notification_setting(filter: notification_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [notification_setting!]!
  notification_setting_by_id(id: ID!, version: String): notification_setting
  notification_setting_aggregated(groupBy: [String], filter: notification_setting_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [notification_setting_aggregated!]!
  notification_setting_by_version(version: String!, id: ID!): version_notification_setting
  group(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [group!]!
  group_by_id(id: ID!, version: String): group
  group_aggregated(groupBy: [String], filter: group_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [group_aggregated!]!
  group_by_version(version: String!, id: ID!): version_group
  staticpages(filter: staticpages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [staticpages!]!
  staticpages_by_id(id: ID!, version: String): staticpages
  staticpages_aggregated(groupBy: [String], filter: staticpages_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [staticpages_aggregated!]!
  staticpages_by_version(version: String!, id: ID!): version_staticpages
  settings(version: String): settings
  settings_by_version(version: String!): version_settings
}

type Mutation {
  create_booking_items(filter: booking_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_booking_input!]): [booking!]!
  create_booking_item(data: create_booking_input!): booking
  create_group_directus_users_items(filter: group_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_group_directus_users_input!]): [group_directus_users!]!
  create_group_directus_users_item(data: create_group_directus_users_input!): group_directus_users
  create_bookable_object_group_items(filter: bookable_object_group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_bookable_object_group_input!]): [bookable_object_group!]!
  create_bookable_object_group_item(data: create_bookable_object_group_input!): bookable_object_group
  create_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  create_directus_sync_id_map_item(data: create_directus_sync_id_map_input!): directus_sync_id_map
  create_bookable_object_items(filter: bookable_object_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_bookable_object_input!]): [bookable_object!]!
  create_bookable_object_item(data: create_bookable_object_input!): bookable_object
  create_group_invites_items(filter: group_invites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_group_invites_input!]): [group_invites!]!
  create_group_invites_item(data: create_group_invites_input!): group_invites
  create_notification_setting_items(filter: notification_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_notification_setting_input!]): [notification_setting!]!
  create_notification_setting_item(data: create_notification_setting_input!): notification_setting
  create_group_items(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_group_input!]): [group!]!
  create_group_item(data: create_group_input!): group
  create_staticpages_items(filter: staticpages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_staticpages_input!]): [staticpages!]!
  create_staticpages_item(data: create_staticpages_input!): staticpages
  update_booking_items(filter: booking_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_booking_input!): [booking!]!
  update_booking_batch(filter: booking_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_booking_input!]): [booking!]!
  update_booking_item(id: ID!, data: update_booking_input!): booking
  update_group_directus_users_items(filter: group_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_group_directus_users_input!): [group_directus_users!]!
  update_group_directus_users_batch(filter: group_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_group_directus_users_input!]): [group_directus_users!]!
  update_group_directus_users_item(id: ID!, data: update_group_directus_users_input!): group_directus_users
  update_bookable_object_group_items(filter: bookable_object_group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_bookable_object_group_input!): [bookable_object_group!]!
  update_bookable_object_group_batch(filter: bookable_object_group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_bookable_object_group_input!]): [bookable_object_group!]!
  update_bookable_object_group_item(id: ID!, data: update_bookable_object_group_input!): bookable_object_group
  update_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_sync_id_map_input!): [directus_sync_id_map!]!
  update_directus_sync_id_map_batch(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  update_directus_sync_id_map_item(id: ID!, data: update_directus_sync_id_map_input!): directus_sync_id_map
  update_bookable_object_items(filter: bookable_object_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_bookable_object_input!): [bookable_object!]!
  update_bookable_object_batch(filter: bookable_object_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_bookable_object_input!]): [bookable_object!]!
  update_bookable_object_item(id: ID!, data: update_bookable_object_input!): bookable_object
  update_group_invites_items(filter: group_invites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_group_invites_input!): [group_invites!]!
  update_group_invites_batch(filter: group_invites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_group_invites_input!]): [group_invites!]!
  update_group_invites_item(id: ID!, data: update_group_invites_input!): group_invites
  update_notification_setting_items(filter: notification_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_notification_setting_input!): [notification_setting!]!
  update_notification_setting_batch(filter: notification_setting_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_notification_setting_input!]): [notification_setting!]!
  update_notification_setting_item(id: ID!, data: update_notification_setting_input!): notification_setting
  update_group_items(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_group_input!): [group!]!
  update_group_batch(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_group_input!]): [group!]!
  update_group_item(id: ID!, data: update_group_input!): group
  update_staticpages_items(filter: staticpages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_staticpages_input!): [staticpages!]!
  update_staticpages_batch(filter: staticpages_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_staticpages_input!]): [staticpages!]!
  update_staticpages_item(id: ID!, data: update_staticpages_input!): staticpages
  update_settings(data: update_settings_input!): settings
  delete_booking_items(ids: [ID]!): delete_many
  delete_booking_item(id: ID!): delete_one
  delete_group_directus_users_items(ids: [ID]!): delete_many
  delete_group_directus_users_item(id: ID!): delete_one
  delete_bookable_object_group_items(ids: [ID]!): delete_many
  delete_bookable_object_group_item(id: ID!): delete_one
  delete_directus_sync_id_map_items(ids: [ID]!): delete_many
  delete_directus_sync_id_map_item(id: ID!): delete_one
  delete_bookable_object_items(ids: [ID]!): delete_many
  delete_bookable_object_item(id: ID!): delete_one
  delete_group_invites_items(ids: [ID]!): delete_many
  delete_group_invites_item(id: ID!): delete_one
  delete_notification_setting_items(ids: [ID]!): delete_many
  delete_notification_setting_item(id: ID!): delete_one
  delete_group_items(ids: [ID]!): delete_many
  delete_group_item(id: ID!): delete_one
  delete_staticpages_items(ids: [ID]!): delete_many
  delete_staticpages_item(id: ID!): delete_one
}

type Subscription {
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  booking_mutated(event: EventEnum): booking_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  group_directus_users_mutated(event: EventEnum): group_directus_users_mutated
  bookable_object_group_mutated(event: EventEnum): bookable_object_group_mutated
  directus_sync_id_map_mutated(event: EventEnum): directus_sync_id_map_mutated
  bookable_object_mutated(event: EventEnum): bookable_object_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  group_invites_mutated(event: EventEnum): group_invites_mutated
  notification_setting_mutated(event: EventEnum): notification_setting_mutated
  group_mutated(event: EventEnum): group_mutated
  staticpages_mutated(event: EventEnum): staticpages_mutated
  settings_mutated(event: EventEnum): settings_mutated
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""ISO8601 Date values"""
scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""BigInt value"""
scalar GraphQLBigInt

"""GeoJSON value"""
scalar GraphQLGeoJSON

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum EventEnum {
  create
  update
  delete
}

type bookable_object {
  id: ID!
  status: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  location: GraphQLGeoJSON
  name: String
  description: String
  tags: JSON
  tags_func: count_functions
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files

  """If the bookable object requires login to see the booking page."""
  is_internal: Boolean
  owner(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  uniqueId: String
  type: String
  confirm_booking_required: Boolean
  information_shared: Boolean
  confirm_role: String
  group(filter: bookable_object_group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [bookable_object_group]
  group_func: count_functions
}

type bookable_object_aggregated {
  group: JSON
  countAll: Int
  count: bookable_object_aggregated_count
  countDistinct: bookable_object_aggregated_count
  avg: bookable_object_aggregated_fields
  sum: bookable_object_aggregated_fields
  avgDistinct: bookable_object_aggregated_fields
  sumDistinct: bookable_object_aggregated_fields
  min: bookable_object_aggregated_fields
  max: bookable_object_aggregated_fields
}

type bookable_object_aggregated_count {
  id: Int
  status: Int
  date_created: Int
  date_updated: Int
  location: Int
  name: Int
  description: Int
  tags: Int
  image: Int

  """If the bookable object requires login to see the booking page."""
  is_internal: Int
  owner: Int
  uniqueId: Int
  type: Int
  confirm_booking_required: Int
  information_shared: Int
  confirm_role: Int
  group: Int
}

type bookable_object_aggregated_fields {
  id: Float
}

type bookable_object_group {
  id: ID!
  bookable_object_id(filter: bookable_object_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): bookable_object
  group_id(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): group
}

type bookable_object_group_aggregated {
  group: JSON
  countAll: Int
  count: bookable_object_group_aggregated_count
  countDistinct: bookable_object_group_aggregated_count
  avg: bookable_object_group_aggregated_fields
  sum: bookable_object_group_aggregated_fields
  avgDistinct: bookable_object_group_aggregated_fields
  sumDistinct: bookable_object_group_aggregated_fields
  min: bookable_object_group_aggregated_fields
  max: bookable_object_group_aggregated_fields
}

type bookable_object_group_aggregated_count {
  id: Int
  bookable_object_id: Int
  group_id: Int
}

type bookable_object_group_aggregated_fields {
  id: Float
  bookable_object_id: Float
  group_id: Float
}

type bookable_object_group_mutated {
  key: ID!
  event: EventEnum
  data: bookable_object_group
}

type bookable_object_mutated {
  key: ID!
  event: EventEnum
  data: bookable_object
}

type booking {
  id: ID!
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  bookable_object_id(filter: bookable_object_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): bookable_object
  start_date: Date
  start_date_func: datetime_functions
  end_date: Date
  end_date_func: datetime_functions

  """
  If the event is full day. The end date is ignored and the day of the start date is used.
  """
  is_full_day: Boolean
  mail: String
  phone: String
  description: String

  """True when the booking is confirmed through booking object admin."""
  confirmed: Boolean
  display_name: String
  confirmed_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  secret_edit_key: String
}

type booking_aggregated {
  group: JSON
  countAll: Int
  count: booking_aggregated_count
  countDistinct: booking_aggregated_count
  avg: booking_aggregated_fields
  sum: booking_aggregated_fields
  avgDistinct: booking_aggregated_fields
  sumDistinct: booking_aggregated_fields
  min: booking_aggregated_fields
  max: booking_aggregated_fields
}

type booking_aggregated_count {
  id: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  bookable_object_id: Int
  start_date: Int
  end_date: Int

  """
  If the event is full day. The end date is ignored and the day of the start date is used.
  """
  is_full_day: Int
  mail: Int
  phone: Int
  description: Int

  """True when the booking is confirmed through booking object admin."""
  confirmed: Int
  display_name: Int
  confirmed_by: Int
  secret_edit_key: Int
}

type booking_aggregated_fields {
  id: Float
  bookable_object_id: Float
}

type booking_mutated {
  key: ID!
  event: EventEnum
  data: booking
}

type count_functions {
  count: Int
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  comment: String
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  uploaded_on: Date
  uploaded_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

type directus_permissions {
  id: ID
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  mv_hash: String!
  mv_ts: Date
  mv_ts_func: datetime_functions
  mv_locked: Boolean!
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_sync_id_map {
  id: ID!
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
  created_at_func: datetime_functions
}

type directus_sync_id_map_aggregated {
  group: JSON
  countAll: Int
  count: directus_sync_id_map_aggregated_count
  countDistinct: directus_sync_id_map_aggregated_count
  avg: directus_sync_id_map_aggregated_fields
  sum: directus_sync_id_map_aggregated_fields
  avgDistinct: directus_sync_id_map_aggregated_fields
  sumDistinct: directus_sync_id_map_aggregated_fields
  min: directus_sync_id_map_aggregated_fields
  max: directus_sync_id_map_aggregated_fields
}

type directus_sync_id_map_aggregated_count {
  id: Int
  table: Int
  sync_id: Int
  local_id: Int
  created_at: Int
}

type directus_sync_id_map_aggregated_fields {
  id: Float
}

type directus_sync_id_map_mutated {
  key: ID!
  event: EventEnum
  data: directus_sync_id_map
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  display_name: String
  telegram_user_id: String
  telegram_user_name: String
  Groups(filter: group_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [group_directus_users]
  Groups_func: count_functions
  Invites(filter: group_invites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [group_invites]
  Invites_func: count_functions
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

type group {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String
  description: String
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  owner(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  emoji: String
  users(filter: group_directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [group_directus_users]
  users_func: count_functions
  invites(filter: group_invites_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [group_invites]
  invites_func: count_functions
  bookable_objects(filter: bookable_object_group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [bookable_object_group]
  bookable_objects_func: count_functions
}

type group_aggregated {
  group: JSON
  countAll: Int
  count: group_aggregated_count
  countDistinct: group_aggregated_count
  avg: group_aggregated_fields
  sum: group_aggregated_fields
  avgDistinct: group_aggregated_fields
  sumDistinct: group_aggregated_fields
  min: group_aggregated_fields
  max: group_aggregated_fields
}

type group_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  description: Int
  avatar: Int
  owner: Int
  emoji: Int
  users: Int
  invites: Int
  bookable_objects: Int
}

type group_aggregated_fields {
  id: Float
  sort: Float
}

type group_directus_users {
  id: ID!
  group_id(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): group
  directus_users_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role: String
}

type group_directus_users_aggregated {
  group: JSON
  countAll: Int
  count: group_directus_users_aggregated_count
  countDistinct: group_directus_users_aggregated_count
  avg: group_directus_users_aggregated_fields
  sum: group_directus_users_aggregated_fields
  avgDistinct: group_directus_users_aggregated_fields
  sumDistinct: group_directus_users_aggregated_fields
  min: group_directus_users_aggregated_fields
  max: group_directus_users_aggregated_fields
}

type group_directus_users_aggregated_count {
  id: Int
  group_id: Int
  directus_users_id: Int
  role: Int
}

type group_directus_users_aggregated_fields {
  id: Float
  group_id: Float
}

type group_directus_users_mutated {
  key: ID!
  event: EventEnum
  data: group_directus_users
}

type group_invites {
  id: ID!
  group_id(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): group
  user_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  email: String
  role: String
}

type group_invites_aggregated {
  group: JSON
  countAll: Int
  count: group_invites_aggregated_count
  countDistinct: group_invites_aggregated_count
  avg: group_invites_aggregated_fields
  sum: group_invites_aggregated_fields
  avgDistinct: group_invites_aggregated_fields
  sumDistinct: group_invites_aggregated_fields
  min: group_invites_aggregated_fields
  max: group_invites_aggregated_fields
}

type group_invites_aggregated_count {
  id: Int
  group_id: Int
  user_id: Int
  email: Int
  role: Int
}

type group_invites_aggregated_fields {
  id: Float
  group_id: Float
}

type group_invites_mutated {
  key: ID!
  event: EventEnum
  data: group_invites
}

type group_mutated {
  key: ID!
  event: EventEnum
  data: group
}

type notification_setting {
  id: ID!
  email_notification: Boolean
  user_id(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  bookable_object_id(filter: bookable_object_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): bookable_object
  group_id(filter: group_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): group
  telegram: Boolean
}

type notification_setting_aggregated {
  group: JSON
  countAll: Int
  count: notification_setting_aggregated_count
  countDistinct: notification_setting_aggregated_count
  avg: notification_setting_aggregated_fields
  sum: notification_setting_aggregated_fields
  avgDistinct: notification_setting_aggregated_fields
  sumDistinct: notification_setting_aggregated_fields
  min: notification_setting_aggregated_fields
  max: notification_setting_aggregated_fields
}

type notification_setting_aggregated_count {
  id: Int
  email_notification: Int
  user_id: Int
  bookable_object_id: Int
  group_id: Int
  telegram: Int
}

type notification_setting_aggregated_fields {
  id: Float
  bookable_object_id: Float
  group_id: Float
}

type notification_setting_mutated {
  key: ID!
  event: EventEnum
  data: notification_setting
}

type settings {
  id: ID!
  display_legal: Boolean
}

type settings_mutated {
  key: ID!
  event: EventEnum
  data: settings
}

type staticpages {
  id: ID!
  status: String
  slug: String
  content: String
}

type staticpages_aggregated {
  group: JSON
  countAll: Int
  count: staticpages_aggregated_count
  countDistinct: staticpages_aggregated_count
}

type staticpages_aggregated_count {
  id: Int
  status: Int
  slug: Int
  content: Int
}

type staticpages_mutated {
  key: ID!
  event: EventEnum
  data: staticpages
}

""""""
type version_bookable_object {
  id: ID
  status: String
  date_created: Date
  date_updated: Date
  location: GraphQLGeoJSON
  name: String
  description: String
  tags: JSON
  image: JSON

  """If the bookable object requires login to see the booking page."""
  is_internal: Boolean
  owner: JSON
  uniqueId: String
  type: String
  confirm_booking_required: Boolean
  information_shared: Boolean
  confirm_role: String
  group: JSON
}

""""""
type version_bookable_object_group {
  id: ID
  bookable_object_id: JSON
  group_id: JSON
}

""""""
type version_booking {
  id: ID
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  bookable_object_id: JSON
  start_date: Date
  end_date: Date

  """
  If the event is full day. The end date is ignored and the day of the start date is used.
  """
  is_full_day: Boolean
  mail: String
  phone: String
  description: String

  """True when the booking is confirmed through booking object admin."""
  confirmed: Boolean
  display_name: String
  confirmed_by: JSON
  secret_edit_key: String
}

""""""
type version_directus_sync_id_map {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

""""""
type version_group {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  description: String
  avatar: JSON
  owner: JSON
  emoji: String
  users: JSON
  invites: JSON
  bookable_objects: JSON
}

""""""
type version_group_directus_users {
  id: ID
  group_id: JSON
  directus_users_id: JSON
  role: String
}

""""""
type version_group_invites {
  id: ID
  group_id: JSON
  user_id: JSON
  email: String
  role: String
}

""""""
type version_notification_setting {
  id: ID
  email_notification: Boolean
  user_id: JSON
  bookable_object_id: JSON
  group_id: JSON
  telegram: Boolean
}

""""""
type version_settings {
  id: ID
  display_legal: Boolean
}

""""""
type version_staticpages {
  id: ID
  status: String
  slug: String
  content: String
}

input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input bookable_object_filter {
  id: number_filter_operators
  status: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  location: geometry_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  image: directus_files_filter
  is_internal: boolean_filter_operators
  owner: directus_users_filter
  uniqueId: string_filter_operators
  type: string_filter_operators
  confirm_booking_required: boolean_filter_operators
  information_shared: boolean_filter_operators
  confirm_role: string_filter_operators
  group: bookable_object_group_filter
  group_func: count_function_filter_operators
  _and: [bookable_object_filter]
  _or: [bookable_object_filter]
}

input bookable_object_group_filter {
  id: number_filter_operators
  bookable_object_id: bookable_object_filter
  group_id: group_filter
  _and: [bookable_object_group_filter]
  _or: [bookable_object_group_filter]
}

input booking_filter {
  id: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  bookable_object_id: bookable_object_filter
  start_date: date_filter_operators
  start_date_func: datetime_function_filter_operators
  end_date: date_filter_operators
  end_date_func: datetime_function_filter_operators
  is_full_day: boolean_filter_operators
  mail: string_filter_operators
  phone: string_filter_operators
  description: string_filter_operators
  confirmed: boolean_filter_operators
  display_name: string_filter_operators
  confirmed_by: directus_users_filter
  secret_edit_key: string_filter_operators
  _and: [booking_filter]
  _or: [booking_filter]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

input create_bookable_object_group_input {
  id: ID
  bookable_object_id: create_bookable_object_input
  group_id: create_group_input
}

input create_bookable_object_input {
  id: ID
  status: String
  date_created: Date
  date_updated: Date
  location: GraphQLGeoJSON
  name: String
  description: String
  tags: JSON
  image: create_directus_files_input

  """If the bookable object requires login to see the booking page."""
  is_internal: Boolean
  owner: create_directus_users_input
  uniqueId: String
  type: String
  confirm_booking_required: Boolean
  information_shared: Boolean
  confirm_role: String
  group: [create_bookable_object_group_input]
}

input create_booking_input {
  id: ID
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  bookable_object_id: create_bookable_object_input
  start_date: Date
  end_date: Date

  """
  If the event is full day. The end date is ignored and the day of the start date is used.
  """
  is_full_day: Boolean
  mail: String
  phone: String
  description: String

  """True when the booking is confirmed through booking object admin."""
  confirmed: Boolean
  display_name: String
  confirmed_by: create_directus_users_input
  secret_edit_key: String
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  uploaded_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean
  users: [create_directus_users_input]
}

input create_directus_sync_id_map_input {
  id: ID
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  display_name: String
  telegram_user_id: String
  telegram_user_name: String
  Groups: [create_group_directus_users_input]
  Invites: [create_group_invites_input]
}

input create_group_directus_users_input {
  id: ID
  group_id: create_group_input
  directus_users_id: create_directus_users_input
  role: String
}

input create_group_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String
  description: String
  avatar: create_directus_files_input
  owner: create_directus_users_input
  emoji: String
  users: [create_group_directus_users_input]
  invites: [create_group_invites_input]
  bookable_objects: [create_bookable_object_group_input]
}

input create_group_invites_input {
  id: ID
  group_id: create_group_input
  user_id: create_directus_users_input
  email: String
  role: String
}

input create_notification_setting_input {
  id: ID
  email_notification: Boolean
  user_id: create_directus_users_input
  bookable_object_id: create_bookable_object_input
  group_id: create_group_input
  telegram: Boolean
}

input create_staticpages_input {
  id: ID
  status: String
  slug: String
  content: String
}

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  comment: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

input directus_dashboards_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

input directus_flows_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  operations: directus_operations_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

input directus_operations_filter {
  id: string_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

input directus_panels_filter {
  id: string_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

input directus_roles_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

input directus_sync_id_map_filter {
  id: number_filter_operators
  table: string_filter_operators
  sync_id: string_filter_operators
  local_id: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  _and: [directus_sync_id_map_filter]
  _or: [directus_sync_id_map_filter]
}

input directus_users_filter {
  id: string_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  display_name: string_filter_operators
  telegram_user_id: string_filter_operators
  telegram_user_name: string_filter_operators
  Groups: group_directus_users_filter
  Groups_func: count_function_filter_operators
  Invites: group_invites_filter
  Invites_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

input directus_versions_filter {
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

input geometry_filter_operators {
  _eq: GraphQLGeoJSON
  _neq: GraphQLGeoJSON
  _intersects: GraphQLGeoJSON
  _nintersects: GraphQLGeoJSON
  _intersects_bbox: GraphQLGeoJSON
  _nintersects_bbox: GraphQLGeoJSON
  _null: Boolean
  _nnull: Boolean
}

input group_directus_users_filter {
  id: number_filter_operators
  group_id: group_filter
  directus_users_id: directus_users_filter
  role: string_filter_operators
  _and: [group_directus_users_filter]
  _or: [group_directus_users_filter]
}

input group_filter {
  id: number_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  avatar: directus_files_filter
  owner: directus_users_filter
  emoji: string_filter_operators
  users: group_directus_users_filter
  users_func: count_function_filter_operators
  invites: group_invites_filter
  invites_func: count_function_filter_operators
  bookable_objects: bookable_object_group_filter
  bookable_objects_func: count_function_filter_operators
  _and: [group_filter]
  _or: [group_filter]
}

input group_invites_filter {
  id: number_filter_operators
  group_id: group_filter
  user_id: directus_users_filter
  email: string_filter_operators
  role: string_filter_operators
  _and: [group_invites_filter]
  _or: [group_invites_filter]
}

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input notification_setting_filter {
  id: number_filter_operators
  email_notification: boolean_filter_operators
  user_id: directus_users_filter
  bookable_object_id: bookable_object_filter
  group_id: group_filter
  telegram: boolean_filter_operators
  _and: [notification_setting_filter]
  _or: [notification_setting_filter]
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input staticpages_filter {
  id: string_filter_operators
  status: string_filter_operators
  slug: string_filter_operators
  content: string_filter_operators
  _and: [staticpages_filter]
  _or: [staticpages_filter]
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input update_bookable_object_group_input {
  id: ID
  bookable_object_id: update_bookable_object_input
  group_id: update_group_input
}

input update_bookable_object_input {
  id: ID
  status: String
  date_created: Date
  date_updated: Date
  location: GraphQLGeoJSON
  name: String
  description: String
  tags: JSON
  image: update_directus_files_input

  """If the bookable object requires login to see the booking page."""
  is_internal: Boolean
  owner: update_directus_users_input
  uniqueId: String
  type: String
  confirm_booking_required: Boolean
  information_shared: Boolean
  confirm_role: String
  group: [update_bookable_object_group_input]
}

input update_booking_input {
  id: ID
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  bookable_object_id: update_bookable_object_input
  start_date: Date
  end_date: Date

  """
  If the event is full day. The end date is ignored and the day of the start date is used.
  """
  is_full_day: Boolean
  mail: String
  phone: String
  description: String

  """True when the booking is confirmed through booking object admin."""
  confirmed: Boolean
  display_name: String
  confirmed_by: update_directus_users_input
  secret_edit_key: String
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  uploaded_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  users: [update_directus_users_input]
}

input update_directus_sync_id_map_input {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  display_name: String
  telegram_user_id: String
  telegram_user_name: String
  Groups: [update_group_directus_users_input]
  Invites: [update_group_invites_input]
}

input update_group_directus_users_input {
  id: ID
  group_id: update_group_input
  directus_users_id: update_directus_users_input
  role: String
}

input update_group_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  description: String
  avatar: update_directus_files_input
  owner: update_directus_users_input
  emoji: String
  users: [update_group_directus_users_input]
  invites: [update_group_invites_input]
  bookable_objects: [update_bookable_object_group_input]
}

input update_group_invites_input {
  id: ID
  group_id: update_group_input
  user_id: update_directus_users_input
  email: String
  role: String
}

input update_notification_setting_input {
  id: ID
  email_notification: Boolean
  user_id: update_directus_users_input
  bookable_object_id: update_bookable_object_input
  group_id: update_group_input
  telegram: Boolean
}

input update_settings_input {
  id: ID
  display_legal: Boolean
}

input update_staticpages_input {
  id: ID
  status: String
  slug: String
  content: String
}